
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jcazvdqmxlzpdwgzlyph.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpjYXp2ZHFteGx6cGR3Z3pseXBoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUyNDI3MTMsImV4cCI6MjA2MDgxODcxM30.rjGM4Q4k1PzGb4FCOWpcSQOYnYQKw0iCQLBLeugLMGc";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Enhanced security configuration for the Supabase client
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      storageKey: 'supabase.auth.token',
      storage: typeof window !== 'undefined' ? localStorage : undefined,
      flowType: 'pkce', // More secure authorization flow
      cookieOptions: {
        secure: true,
        sameSite: 'strict'
      }
    },
    global: {
      headers: {
        'Content-Type': 'application/json',
        'X-Client-Info': '@supabase/client-js',
        // Add security headers
        'X-Frame-Options': 'DENY',
        'X-XSS-Protection': '1; mode=block',
        'X-Content-Type-Options': 'nosniff'
      },
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    }
  }
);

// Security utilities imported from the new security utils module
import { 
  sanitizeInput, 
  secureCompare,
  validateCSRFToken,
  generateCSRFToken,
  sanitizeHtml,
  applyCSP,
  setupSessionTimeout
} from '@/utils/securityUtils';

// Add a safer approach to check if a column exists in a table without accessing information_schema directly
export const checkColumnExists = async (tableName: string, columnName: string): Promise<boolean> => {
  try {
    // Use parameterized query to prevent SQL injection
    const query = {
      query_text: `SELECT $1::text FROM $2::text LIMIT 0`,
      params: [columnName, tableName]
    };
    
    const { data, error } = await supabase.functions.invoke('execute_safe_sql', {
      body: query
    });
    
    // If there's no error, the column exists
    return !error;
  } catch (error) {
    console.error(`Error checking if column ${columnName} exists in ${tableName}:`, error);
    return false;
  }
};

// Fallback function if the RPC function doesn't exist
export const checkColumnExistsFallback = async (tableName: string, columnName: string): Promise<boolean> => {
  try {
    // Try to select just that one column from the table with a limit of 1 row
    // Using type casting to "as any" is necessary here due to dynamic table/column names
    const { error } = await supabase
      .from(tableName as any)
      .select(columnName)
      .limit(1);
    
    // If we got an error containing "column" and "does not exist", the column doesn't exist
    if (error && error.message && 
        (error.message.includes(`column "${columnName}" does not exist`) || 
         error.message.includes(`column ${columnName} does not exist`))) {
      return false;
    }
    
    // For other errors, we can't be sure, but we'll assume the column exists
    // as this is more graceful than failing
    return true;
  } catch (error) {
    console.error(`Error in fallback check for column ${columnName} in ${tableName}:`, error);
    return false;
  }
};

// Add security helper to limit access to certain routes
export const requireAuth = async (): Promise<boolean> => {
  try {
    const session = await supabase.auth.getSession();
    // Check if session exists and is not expired
    if (!session.data.session) return false;
    
    const now = new Date();
    const expiresAt = new Date(session.data.session.expires_at || '');
    
    if (expiresAt <= now) {
      // Session has expired, attempt to refresh
      const { data, error } = await supabase.auth.refreshSession();
      if (error || !data.session) {
        console.error('Failed to refresh session:', error);
        return false;
      }
      return true;
    }
    
    return true;
  } catch (error) {
    console.error('Auth check error:', error);
    return false;
  }
};

// Export security utilities to be used elsewhere
export { 
  sanitizeInput, 
  secureCompare,
  validateCSRFToken,
  generateCSRFToken,
  sanitizeHtml,
  applyCSP,
  setupSessionTimeout
};

// Apply CSP at runtime to strengthen security against XSS
if (typeof window !== 'undefined') {
  applyCSP();
}
